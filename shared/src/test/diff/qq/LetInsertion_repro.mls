:NewDefs
:NoJS



fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ fun (%>) bind: forall 'a 'g 'b. (Code['a, 'g], k: forall 'c. Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]

// fun (%>) bind(rhs, k: forall 'c: Code['a, 'c] -> Code['b, 'c]) = code"let x = ${rhs} in ${k(code"x")}"



// *** ??? ***


// * TV 'a is missing lower bounds here! (lack of transitive closure propagation)
fun body(x, y) = case
  0 then x
  1 then y
  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ fun body: forall 'g 'a. (Code[Int, 'g & ('g | ??c)] & 'a, Code[Int, 'g & ('g | ??c)] & 'a) -> (0 | 1 | Int & ~0 & ~1) -> (Code[Int, ??c0 | 'g] | 'a)

:e
body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.24: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.6: 	fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ ║       	                                                     ^^
//│ ╟── into type `'g`
//│ ║  l.24: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	                                                                     ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.20: 	  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ ║        	                              ^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.20: 	  n then code"${x} + ${y}" %> z => body(x, z)(n - 1)
//│ ╙──      	                           ^^
//│ forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]

let c = code"(x, y) => ${body(code"x", code"y")(0)}"
//│ let c: Code[(Int, Int) -> Int, ??c & ~??x & ~??y]

:e
run(c)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.47: 	run(c)
//│ ║        	^^^^^^
//│ ╙── expression of type `??c & ~??x & ~??y` does not match type `nothing`
//│ error | (Int, Int) -> Int



// * An unnecessary complication, just for testing purposes:

fun body(x, y) = case
  0 then x
  1 then y
  n then code"${x} + ${y}" %> z => code"${body(x, z)(n - 1)}"
//│ fun body: forall 'a 'g 'b 'c. (Code[Int, 'a & 'b & (??c | 'g)] & 'c, Code[Int, 'a & 'b & (??c | 'g)] & 'c) -> (0 | 1 | Int & ~0 & ~1) -> (Code[Int, 'g | ??c0] | 'c)
//│   where
//│     'a <: 'g | ??c
//│     'g :> ??c0 | 'b
//│        <: 'a

code"(x, y) => ${body(code"x", code"y")(0)}"
//│ Code[(Int, Int) -> Int, ??c & ~??x & ~??y]

:e
body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ╔══[ERROR] Type error in type ascription
//│ ║  l.72: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	^^^^
//│ ╟── type variable `'c` leaks out of its scope
//│ ║  l.6: 	fun (%>) bind: (Code['a, 'g], k: forall 'c: Code['a, 'c] -> Code['b, 'c | 'g]) -> Code['b, 'g]
//│ ║       	                                                     ^^
//│ ╟── into type `'g`
//│ ║  l.72: 	body : forall 'g: (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]
//│ ║        	                                                                     ^^
//│ ╟── adding a type annotation to any of the following terms may help resolve the problem
//│ ╟── • this function:
//│ ║  l.61: 	  n then code"${x} + ${y}" %> z => code"${body(x, z)(n - 1)}"
//│ ║        	                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//│ ╟── • this reference:
//│ ║  l.61: 	  n then code"${x} + ${y}" %> z => code"${body(x, z)(n - 1)}"
//│ ╙──      	                           ^^
//│ forall 'g. (Code[Int, 'g], Code[Int, 'g]) -> Int -> Code[Int, 'g]

let c = code"(x, y) => ${body(code"x", code"y")(0)}"
//│ let c: Code[(Int, Int) -> Int, ??c & ~??x & ~??y]

:e
run(c)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.95: 	run(c)
//│ ║        	^^^^^^
//│ ╙── expression of type `??c & ~??x & ~??y` does not match type `nothing`
//│ error | (Int, Int) -> Int



